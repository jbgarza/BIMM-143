---
title: "Class 8: Breast Cancer Mini Project"
author: "James Garza (PID: A16300772)"
format: pdf
---

Before we get stuck into project work we will have a quick look at applying PCA to some examole RNASeq data (tail end of lab 7)

Read the data (detailed in lab 7):

```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

> Q. How many genes are in this dataset?

```{r}
nrow(rna.data)
```

```{r}
## Again we have to take the transpose of our data 
pca <- prcomp(t(rna.data), scale=TRUE)
 
## Simple un polished plot of pc1 and pc2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
```

```{r}
summary(pca)
```

```{r}
# WE have 5 wt and 5 ko samples
mycols <- c(rep("blue",5), rep("red", 5))
mycols
```

```{r}
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", col=mycols)
```

I could examine which genes contribute most to this first PC

```{r}
pca$rotation[,1]
```

```{r}
head(sort(abs(pca$rotation[,1]), decreasing = T))
```

# Analkysis of Breast Cancer FNA (fine needle aspirations) data.

```{r}
# read.csv("https://bioboot.github.io/bimm143_S20/class-material/WisconsinCancer.csv")
```

```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"

# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
```

```{r}
# Create diagnosis vector for later 
diagnosis <- as.factor(wisc.df$diagnosis)
diagnosis
```

Now I want to make sure I remove that column from my dataset for analysis
```{r}
# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]
head(wisc.data)
```



> Q1. How many observations are in this dataset?

```{r}
nrow(wisc.data)
```
There are 569 patients in this dataset

```{r}
length(wisc.data)
```
There are 30 columns they are looking at.

>Q2. How many of the observations have a malignant diagnosis?

```{r}
table(wisc.df$diagnosis)
```
There are 212 malignant individuals

>Q3. How many variables/features in the data are suffixed with _mean?

```{r}
colnames(wisc.data)

length(grep("_mean", colnames(wisc.data)))


```
There are 10 columns with the name "_mean" in them.


## Principla Component Analysis (PCA)

Here we will use `prcomp()` on the `wisc.data` object - the one without the diagnosis column.

First we have to decide whether to use the `scale=TRUE` argument when we run `prcomp()`.
We can look at the means and sd of each column. If they are similar then we are all good to go. IOf not we should use `scale=TRUE`. 

```{r}
# Check column means and standard deviations
colMeans(wisc.data)
```
```{r}
apply(wisc.data,2,sd)
```

These are very different so we should `scale=TRUE`.

```{r}
# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(wisc.data, scale=TRUE)
summary(wisc.pr)
```

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

44.27% is captured by the first PC

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

3 PCs are needed to get 70% of the variance

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7 PCs are needed to get 90% of the variance

> Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

What stands out to me is that it is very difficult to understand because it is designed for small datasets and ours is too big.
```{r}
biplot(wisc.pr)
```

We need to make our own plot.

```{r}
attributes(wisc.pr)
```
```{r}
plot(wisc.pr$x[,1], wisc.pr$x[,2], col=diagnosis)
```

```{r}
library(ggplot2)

pc <- as.data.frame(wisc.pr$x)

ggplot(pc) + 
  aes(PC1, PC2, col=diagnosis)+
  geom_point()
```

> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

There are still two clear groupins between the benign and malignant samples between PC1 and PC3.

```{r}
# Repeat for components 1 and 3
plot(wisc.pr$x[,1], wisc.pr$x[,3], col = diagnosis, 
     xlab = "PC1", ylab = "PC3")
```

> Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

```{r}
wisc.pr$rotation["concave.points_mean",1]
```


> Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

```{r}
tbl <- summary(wisc.pr)
which(tbl$importance[3,] > 0.8)[1]
```

5 PCs are needed to explain 80% of the variation in the dataset


## Hierarchical clustering

The main function for Hierarchical clustering is called `hclust()`. It takes a distance matrix as inpiut.

```{r}
d <- dist( scale(wisc.data))
wisc.hclust <- hclust(d)
plot(wisc.hclust)
```
```{r}
plot(wisc.hclust)
abline(h=20, col="purple")
grps <- cutree(wisc.hclust, h=20)
table(grps)
```
> Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

At height 20 there are 4 clusters.


Come back here later to see how our cluster grps correspond to M or B groups.
```{r}
table(grps)
```

## Combining Methods

Here we will perform Clustering PCA Results rather than the original data.

In other words we will cluster using `wisc.pr$x` - our new better variables or PCs. We can choose as many or as few PCs to use as we like.  It is your call!

```{r}
d.pc <- dist (wisc.pr$x[,1:3] )
wisc.pr.hclust <- hclust(d.pc, method="ward.D2")
plot(wisc.pr.hclust)
```

```{r}
plot(wisc.pr.hclust)
abline(h=80, col="red")
grps <- cutree(wisc.pr.hclust, h=80)
table(grps)
```

> Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10?



> Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

We can use `table()` function to make a cross-table as well as just a count table.

```{r}
table(diagnosis)
```
```{r}
table(grps, diagnosis)
```
Write a note here about how to read this cross-table result.
The results indicate that our cluster 1 mostly captures cancer (M) and our cluster 2 mostly captures our healthy (B) from samples/individuals.


## 7. Prediction

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

And plot this up

```{r}
plot(wisc.pr$x[,1:2], col=grps)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

> Q18. Which of these new patients should we prioritize for follow up based on your results?

We should follow up with patients that are benign but are near cluster 1 because that indicates that they would be best suited for follow ups because they are have similar data to those with malignancy which suggests that they deserve a second look at their respective cancer cases.



