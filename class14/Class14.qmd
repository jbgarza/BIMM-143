---
title: "Class 14: RNA-Seq analysis mini-project"
author: "James Garza (PID: A16300772)"
format: pdf
---

```{r}
library(DESeq2)
```

```{r}
counts <- read.csv("GSE37704_featurecounts.csv", row.names=1)
metadata <- read.csv("GSE37704_metadata.csv")
```

```{r}
head(counts)
```

```{r}
head(metadata)
```

Check if the colData and the countData match up

```{r}
metadata$id
```


```{r}
colnames(counts)
```

> Q. Complete the code below to remove the troublesome first column from countData

```{r}
# RM first column
countData <- counts[,-1]
```

Now check if the metadata and count data columns all match up:

```{r}
all(colnames(countData) == metadata$id)
```

We need to remove all the 0 count genes first

```{r}
head(countData,3)
```

> Q. Complete the code below to filter countData to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).

To identify these zero count gens we can sum across the rows and check if the sum is more than zero.

```{r}
to.keep.inds <- rowSums(countData) > 0
nonzero.counts <- countData[to.keep.inds,]
```

## DESeq setup and analysis

```{r}
#| message: false

library(DESeq2)
```

```{r}
dds <- DESeqDataSetFromMatrix(countData = nonzero.counts,
                              colData = metadata,
                              design = ~condition)

dds <- DESeq(dds)
```


```{r}
res <- results(dds)
head(res)
```

```{r}
res = results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
```

```{r}
summary(res)
```


## Volcano Plot

```{r}
plot(res$log2FoldChange, res$padj)
```

```{r}
plot(res$log2FoldChange, -log(res$padj), xlab="Fold Change", ylab="-logpvalue", 
sub="Volcano Plot")

```

> Q. Improve this plot by completing the below code, which adds color and axis labels

```{r}
  mycols <- rep("gray", nrow(res))
  mycols[ abs(res$log2FoldChange) > 2 ]  <- "red"
  inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
  mycols[ inds ] <- "blue"
  plot( res$log2FoldChange,  -log(res$padj),
   col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )
  abline(v=c(-2,2), col="black", lty=2)
  abline(h=-log(0.1), col="black", lty=2)
```

## Adding Gene Annotation

> Q. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)

res$symbol = mapIds(org.Hs.eg.db,
                    keys=row.names(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

head(res, 10)
```

> Q. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res = res[order(res$padj),]
write.csv(res, file ="deseq_results.csv")
```

## Pathway Analysis

```{r}
library(pathview)
```

```{r}
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

```{r}
attributes(keggres)
```

```{r}
# Look at the first few down (less) pathways
head(keggres$less)
```

```{r}
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

![](hsa04110.pathview.png)

```{r}
# A different PDF based output of the same data
pathview(gene.data=foldchanges, pathway.id="hsa04110", kegg.native=FALSE)
```

```{r}
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

![](hsa04330.pathview.png)
![](hsa04640.pathview.png)

![](hsa04630.pathview.png)

![](hsa00140.pathview.png)

![](hsa04142.pathview.png)

> Q. Can you do the same procedure as above to plot the pathview figures for the top 5 down-reguled pathways?

```{r}
## Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$less)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```

```{r}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

![](hsa04110.pathview.png)

![](hsa03030.pathview.png)

![](hsa03013.pathview.png)
![](hsa03440.pathview.png)
![](hsa04114.pathview.png)

## Section 3. Gene Ontology (GO)

```{r}
data(go.sets.hs)
data(go.subs.hs)

# Focus on Biological Process subset of GO
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

## Reactome Analysis

```{r}
sig_genes <- res[res$padj <= 0.05 & !is.na(res$padj), "symbol"]
print(paste("Total number of significant genes:", length(sig_genes)))
```

```{r}
write.table(sig_genes, file="significant_genes.txt", row.names=FALSE, col.names=FALSE, quote=FALSE)
```

> Q: What pathway has the most significant “Entities p-value”? Do the most significant pathways listed match your previous KEGG results? What factors could cause differences between the two methods?

