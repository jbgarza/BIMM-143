---
title: "Class 13: RNA-Seq analysis with DESeq2"
author: "James Garza (PID: A16300772)"
format: pdf
---

```{r}
# For this class we will need DESeq2:
# BiocManager::install("DESeq2")
```

```{r}
library(BiocManager)
library(DESeq2)
```

In today's class we will explore and analyze data from an RNASeq experiment from a  published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).


## Data Import

We have two input file, so called "count data" and "col data".

```{r}
# Complete the missing code
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv")
```

```{r}
head(counts)
```

```{r}
head(metadata)
```


## Data Explore

> Q1. How many genes are in this dataset? 

```{r}
dim(counts)
```
There are 38694 genes


> Q2. How many ‘control’ cell lines do we have?

```{r}
metadata$dex == "control"
sum(metadata$dex == "control")
```
There are 4 control cell lines

## 4. Toy differential gene expression

Time to do some analysis.

We have 4 control and 4 treated samples/experiments/columns.

Make sure teh metadata id column mathces the columns in our cont data.

```{r}
colnames(counts)
```

```{r}
metadata$id
```

```{r}
colnames(counts) == metadata$id
```

To check that all elements of a vector are TRUE we can use the `all()` function.

```{r}
all(c(T, T, T))

all(c(T, T, F))
```

```{r}
all(colnames(counts) == metadata$id)
```

To start I will calculate the `control.mean` and `treated.mean` values and compare them.

- Identify and extract the `control` only columns
- determine the mean claue for each gene (i.e. row)
- Do the same for `treated`.

> Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 

I would use the apply function to make the code chunks easier to understand

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)


```{r}
# Where does it tell me which columns are control?
control.inds <- metadata$dex == "control"
control.counts <- counts[ , control.inds]
control.mean <- apply(control.counts, 1, mean)
```

```{r}
# Where does it tell me which columns are treated?
treated.inds <- metadata$dex == "treated"
treated.counts <- counts[ , treated.inds]
treated.mean <- apply(treated.counts, 1, mean)
```

Let's store these together for ease of book-keeping

```{r}
meancounts <- data.frame(control.mean, treated.mean)
```

Have a quick view of this data:

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
plot(meancounts)
```

This data is screaming at us to log transform as it is so heavely skewed and over such a wide range

> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot? 

I would use geom_point to make the graph

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this? 

the argument is log 
```{r}
plot(meancounts, log="xy")
```

I want to compare the treated and the control values here and we will use fold change in log2 units to do this. log2(Treated/Control)

```{r}
log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)
meancounts$log2fc <- log2fc
```

No difference
```{r}
log2(20/20)
```
A doubling in the treated:
```{r}
log2(20/10)
```
A halving in the treated:
```{r}
log2(5/10)
```
A quadrupling in the treated:
```{r}
log2(40/10)
```

A common rule of thumb cut-off for calling a gene "differentially expressed" is a log2 fold-change value of either > +2 or < -2 for "up regulated" and "down regulated" respectively.

```{r}
head(meancounts)
```

We first need to remove zero count genes - as we can't say anything about these genes anyway and their division of log values are messing things up (divide by zero) or the -infinity log problem

```{r}
to.rm.ind <- rowSums(meancounts[,1:2] == 0) > 0
mycounts <- meancounts[!to.rm.ind, ]
```


```{r}
sum(meancounts$log2fc > +2, na.rm=T)
```

> Q. How many genes do we have left that we can say something about (i.e. they don't have any zero counts)?

```{r}
nrow(mycounts)
```

> Q8. Using the up.ind vector above can you determine how many up regulated genes we have at the greater than 2 fc level? 

```{r}
sum(mycounts$log2fc > +2, na.rm=T)
```
250 genes are up regulated

> Q9. Using the down.ind vector above can you determine how many down regulated genes we have at the greater than 2 fc level? 

```{r}
sum(mycounts$log2fc < -2, na.rm=T)
```
367 genes are down regulated

> Q10. Do you trust these results? Why or why not?

Also no because we did not have perform a statistical test between samples so we cannot verify the results and see if they are significant

## DESeq Analysis

Let's do this properly with the help of the DESeq2 package

```{r}
#| message: false

library(DESeq2)
```

We have to use a specific data object for working with DESeq.

```{r}
dds <- DESeqDataSetFromMatrix(countData = counts,
                       colData = metadata,
                       design = ~dex)
```

Run our main analysis with the ~DESeq()` function
```{r}
dds <- DESeq(dds)
```

To get our results out of our `dds` we can use the DESeq function called `result()`:
```{r}
res <- results(dds)
head(res)
```

> Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

# Volcano Plot

A very common and useful summary results figure from this type of analysis is called a volcano plot - a plot of log2 fold change vs P-value. We use the `padj` the adjusted P-value for multiple testing.

```{r}
plot(res$log2FoldChange, res$padj)
```

```{r}
plot(res$log2FoldChange, -log(res$padj), xlab="Fold Change", ylab="-logpvalue", sub="Volcano Plot")
```

Add some color and nice labels for this plot.

```{r}
# Setup our custom point color vector 
mycols <- rep("gray", nrow(res))
mycols[ abs(res$log2FoldChange) > 2 ]  <- "red" 

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

# Volcano plot with custom colors 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )

# Cut-off lines
abline(v=c(-2,2), col="black", lty=2)
abline(h=-log(0.1), col="black", lty=2)
```



```{r}
library(EnhancedVolcano)
library(ggplot2)
library(ggrepel)
```


## Add Annotation data

```{r}
head(res)
```

```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")
```

```{r}
columns(org.Hs.eg.db)
```
> Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.


```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our gene names
                     
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

I also want entrez IDs

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="ENTREZID",          # The new format we want to add
                     multiVals="first")

head(res)
```

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",        # The format of our genenames
                     column="GENENAME",          # The new format we want to add
                     multiVals="first")

head(res)
```

Now that I have added the necessary annotation data I can talk to different databases that use these IDs.


We will use the `gage` package to do geneset analysis (a.k.a. pathway analysis , geneset enrichment, overlap analysis)

```{r}
library(pathview)
library(gage)
library(gageData)
```

We will use KEGG first ()
```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

The main `gage()` function requires a named vector of fold changes, where the names of the values are the Entrez gene IDs. Just wants a vector of importance

```{r}
foldchange <- res$log2FoldChange
names(foldchange) <- res$entrez
head(foldchange)
```

Run the analysis

```{r}
# Get the results
keggres = gage(foldchange, gsets=kegg.sets.hs)
```

Let's look at what is in our results here

```{r}
attributes(keggres)
```


```{r}
# Look at the first three down (less) pathways
head(keggres$less, 3)
```

I can now use the returned pathways IDs from KEGG as input to the `pathview` package to make pathway figures with our DEGs highlighted.

```{r}
pathview(gene.data=foldchange, pathway.id="hsa05310")
```

![](hsa05310.pathview.png)








